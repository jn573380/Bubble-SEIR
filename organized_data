organized_data = function(k,beta,kappa,gamma,r,S0,E0,I0,R0,N,Nsim){
  df = list()
  dfsep = list()
  count = c()
  countk = c()
  dur = c()
  durk = c()
  for(i in 1:Nsim){
    numberk= Bubbled_SEIR(rep(S0,k),rep(E0,k),rep(I0,k),rep(R0,k),rep(beta,k),rep(kappa,k),rep(gamma,k),rep(r,k),k) #simulated data with k bubbles
    number = Bubbled_SEIR(S0*k,E0*k,I0*k,R0*k,beta,kappa,gamma,r,1) #simulated data without bubble
    Sday = c()
    Eday = c()
    Iday = c()
    Rday = c()
    Cday = c()
    `%!in%` <- Negate(`%in%`) # helper function to find elements not in a set
    for(j in 1:length(number$time)){
      day = c(0:ceiling(number$time)[length(ceiling(number$time))]) #convert time point to days
      Sday[ceiling(number$time)[j]+1] = number$S[j] 
      Eday[ceiling(number$time)[j]+1] = number$E[j]
      Iday[ceiling(number$time)[j]+1] = number$I[j]
      Rday[ceiling(number$time)[j]+1] = number$R[j]
      Cday[ceiling(number$time)[j]+1] = number$C[j]+(I0*k)
      for(d in day){ # fill missing days with the previous day's values
        if(d %!in% ceiling(number$time)){
          Cday[d+1] = Cday[d]
          Iday[d+1] = Iday[d]
          Sday[d+1] = Sday[d]
          Eday[d+1] = Eday[d]
          Rday[d+1] = Rday[d]
        }
      }
    }
#record final cumulative cases and epidemic duration
    count[i] = tail(Cday,1)
    group = rep(1,length(Cday))
    sim = rep(i,length(Cday))
    dur[i] = tail(day,1)
    df1 = data.frame(day,Sday,Eday,Iday,Rday,Cday,group,sim)

#repeat for the population with k bubbles
    Sdayk = c()
    Edayk = c()
    Idayk = c()
    Rdayk = c()
    Cdayk = c()
    for(l in 1:length(numberk$time)){
      dayk = c(0:ceiling(numberk$time)[length(ceiling(numberk$time))])
      Sdayk[ceiling(numberk$time)[l]+1] = apply(numberk$S,1,sum)[l]
      Edayk[ceiling(numberk$time)[l]+1] = apply(numberk$E,1,sum)[l]
      Idayk[ceiling(numberk$time)[l]+1] = apply(numberk$I,1,sum)[l]
      Rdayk[ceiling(numberk$time)[l]+1] = apply(numberk$R,1,sum)[l]
      Cdayk[ceiling(numberk$time)[l]+1] = apply(numberk$C,1,sum)[l]+(I0*k)
      for(dk in dayk){
        if(dk %!in% ceiling(numberk$time)){
          Cdayk[dk+1] = Cdayk[dk]
          Idayk[dk+1] = Idayk[dk]
          Sdayk[dk+1] = Sdayk[dk]
          Edayk[dk+1] = Edayk[dk]
          Rdayk[dk+1] = Rdayk[dk]
        }
      }
    }
    durk[i] = tail(dayk,1)
    countk[i] = tail(Cdayk,1)
    groupk = rep(k,length(Cdayk))
    simk = rep(i,length(Cdayk))
    dfk = data.frame(dayk,Sdayk,Edayk,Idayk,Rdayk,Cdayk,groupk,simk)
    colnames(dfk) = c("day","Sday","Eday","Iday","Rday","Cday","group","sim")
    df[[i]] = rbind(df1,dfk)

#save the raw data as backup
    a=c()
    for(m in 1:k){
      b=cbind(numberk$S[,m],numberk$E[,m],numberk$I[,m],numberk$R[,m],numberk$C[,m])
      a=cbind(a,b)
    }
    dfsep[[i]] = data.frame(numberk$time,a)
  }
  df = do.call(rbind,df)
  dfsep = do.call(rbind,dfsep)
  return(list(data=df,dfsep=dfsep,count = as.data.frame(count),countk=as.data.frame(countk), dur = as.data.frame(dur),
              durk = as.data.frame(durk)))
}
