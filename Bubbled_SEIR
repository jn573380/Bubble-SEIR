Bubbled_SEIR = function(S,E,I,R,beta,kappa,gamma,r,k) {
  Sm = S
  Em = E
  Im = I
  Rm = R
  pop = rep(1:k, each = (3+4*k)) #population that individual comes from
  pop.to = rep(c(0,0,0,rep(1:k, each = 4)), k) #population that individual moves to
# list all events that may occur, three transmissions within bubble and four movements between bubbles.
  event = rep(c("SE", "EI", "IR",rep(c("S", "E", "I", "R"),k)), k) 
  TT = 0   #total time
  time = c(0)
  C = rep(0,k) # cumulate count how many infections in epidemic
  Cm = C
  while((sum(E)+sum(I))!=0) {  #epidemic will end when there is no more exposed indiviual and infected individual
    N = S+E+I+R  # population size in total 
    q = matrix(0, nrow = k, ncol = (3+4*k), byrow=T)  #create rate matrix
    q[,1] = beta*S*I/N   
    q[,2] = kappa*E   
    q[,3] = gamma*I  
    for(i in 1:k) {
    q[i,4:dim(q)[2]] = rep(c((S[i]*r[i])/(k-1), (E[i]*r[i])/(k-1), (I[i]*r[i])/(k-1), (R[i]*r[i])/(k-1)), k) 
      q[i,(3+(i-1)*4+1):(3+4*i)] = 0 
    }
    q = c(t(q))
    if (sum(q)<=0.0){
      break
    }
    y = sample(1:((3+4*k)*k), size = 1, prob = q/sum(q)) #sample one event with probability q/sum(q)
    t = rexp(1, rate = sum(q)) #sample time point from exponential distribution with parameter sum(q)
    if (pop.to[y] == 0) { #record the current number of individual in S,E,I,R when the sample event is a transmission within bubble
      if(event[y] == "SE") {
        S[pop[y]] = S[pop[y]]-1
        E[pop[y]] = E[pop[y]]+1
        
      }
      if(event[y] == "EI") {
        E[pop[y]] = E[pop[y]]-1
        I[pop[y]] = I[pop[y]]+1
        C[pop[y]] = C[pop[y]]+1
      }
      if(event[y] == "IR") {
        I[pop[y]] = I[pop[y]]-1
        R[pop[y]] = R[pop[y]]+1
        
      }
    }
    if (pop.to[y] > 0) { #record the current number of individual in S,E,I,R when the sample event is a movement between bubbles
      if(event[y] == "S") {
        S[pop[y]] = S[pop[y]]-1
        S[pop.to[y]] = S[pop.to[y]]+1
      }
      if(event[y] == "E") {
        E[pop[y]] = E[pop[y]]-1
        E[pop.to[y]] = E[pop.to[y]]+1
      }
      if(event[y] == "I") {
        I[pop[y]] = I[pop[y]]-1
        I[pop.to[y]] = I[pop.to[y]]+1
        C[pop.to[y]] = C[pop.to[y]]+1
        C[pop[y]] = C[pop[y]]-1
      }
      if(event[y] == "R") {
        R[pop[y]] = R[pop[y]]-1
        R[pop.to[y]] = R[pop.to[y]]+1
      }
    }
    TT = TT+t 
    time = c(time,TT)
    Sm = rbind(Sm,S)
    Em = rbind(Em,E)
    Im = rbind(Im,I)
    Rm = rbind(Rm,R)
    Cm = rbind(Cm,C)
  }
  return (list(S=Sm, E=Em, I=Im, R=Rm, C=Cm, time=time))
}
